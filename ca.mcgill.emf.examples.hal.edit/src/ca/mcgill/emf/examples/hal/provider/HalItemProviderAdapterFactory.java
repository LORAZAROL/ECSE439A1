/**
 */
package ca.mcgill.emf.examples.hal.provider;

import ca.mcgill.emf.examples.hal.util.HalAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class HalItemProviderAdapterFactory extends HalAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public HalItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.Actuator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActuatorItemProvider actuatorItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.Actuator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActuatorAdapter() {
		if (actuatorItemProvider == null) {
			actuatorItemProvider = new ActuatorItemProvider(this);
		}

		return actuatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.Room} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RoomItemProvider roomItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.Room}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRoomAdapter() {
		if (roomItemProvider == null) {
			roomItemProvider = new RoomItemProvider(this);
		}

		return roomItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.SmartHome} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SmartHomeItemProvider smartHomeItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.SmartHome}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSmartHomeAdapter() {
		if (smartHomeItemProvider == null) {
			smartHomeItemProvider = new SmartHomeItemProvider(this);
		}

		return smartHomeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.Owner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OwnerItemProvider ownerItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.Owner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOwnerAdapter() {
		if (ownerItemProvider == null) {
			ownerItemProvider = new OwnerItemProvider(this);
		}

		return ownerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.HomeAutomationSystem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HomeAutomationSystemItemProvider homeAutomationSystemItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.HomeAutomationSystem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHomeAutomationSystemAdapter() {
		if (homeAutomationSystemItemProvider == null) {
			homeAutomationSystemItemProvider = new HomeAutomationSystemItemProvider(this);
		}

		return homeAutomationSystemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.AutomationRule} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AutomationRuleItemProvider automationRuleItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.AutomationRule}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAutomationRuleAdapter() {
		if (automationRuleItemProvider == null) {
			automationRuleItemProvider = new AutomationRuleItemProvider(this);
		}

		return automationRuleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.AutomationActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AutomationActivityItemProvider automationActivityItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.AutomationActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAutomationActivityAdapter() {
		if (automationActivityItemProvider == null) {
			automationActivityItemProvider = new AutomationActivityItemProvider(this);
		}

		return automationActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.ActuatorActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActuatorActivityItemProvider actuatorActivityItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.ActuatorActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActuatorActivityAdapter() {
		if (actuatorActivityItemProvider == null) {
			actuatorActivityItemProvider = new ActuatorActivityItemProvider(this);
		}

		return actuatorActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.SensorActivity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorActivityItemProvider sensorActivityItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.SensorActivity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorActivityAdapter() {
		if (sensorActivityItemProvider == null) {
			sensorActivityItemProvider = new SensorActivityItemProvider(this);
		}

		return sensorActivityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.ControlCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlCommandItemProvider controlCommandItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.ControlCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlCommandAdapter() {
		if (controlCommandItemProvider == null) {
			controlCommandItemProvider = new ControlCommandItemProvider(this);
		}

		return controlCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.Sensor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorItemProvider sensorItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.Sensor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorAdapter() {
		if (sensorItemProvider == null) {
			sensorItemProvider = new SensorItemProvider(this);
		}

		return sensorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.Operand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperandItemProvider operandItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.Operand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperandAdapter() {
		if (operandItemProvider == null) {
			operandItemProvider = new OperandItemProvider(this);
		}

		return operandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.Operation} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperationItemProvider operationItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.Operation}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperationAdapter() {
		if (operationItemProvider == null) {
			operationItemProvider = new OperationItemProvider(this);
		}

		return operationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.SensorType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SensorTypeItemProvider sensorTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.SensorType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSensorTypeAdapter() {
		if (sensorTypeItemProvider == null) {
			sensorTypeItemProvider = new SensorTypeItemProvider(this);
		}

		return sensorTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link ca.mcgill.emf.examples.hal.ActuatorType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActuatorTypeItemProvider actuatorTypeItemProvider;

	/**
	 * This creates an adapter for a {@link ca.mcgill.emf.examples.hal.ActuatorType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActuatorTypeAdapter() {
		if (actuatorTypeItemProvider == null) {
			actuatorTypeItemProvider = new ActuatorTypeItemProvider(this);
		}

		return actuatorTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (actuatorItemProvider != null)
			actuatorItemProvider.dispose();
		if (roomItemProvider != null)
			roomItemProvider.dispose();
		if (smartHomeItemProvider != null)
			smartHomeItemProvider.dispose();
		if (ownerItemProvider != null)
			ownerItemProvider.dispose();
		if (homeAutomationSystemItemProvider != null)
			homeAutomationSystemItemProvider.dispose();
		if (automationRuleItemProvider != null)
			automationRuleItemProvider.dispose();
		if (automationActivityItemProvider != null)
			automationActivityItemProvider.dispose();
		if (actuatorActivityItemProvider != null)
			actuatorActivityItemProvider.dispose();
		if (sensorActivityItemProvider != null)
			sensorActivityItemProvider.dispose();
		if (controlCommandItemProvider != null)
			controlCommandItemProvider.dispose();
		if (sensorItemProvider != null)
			sensorItemProvider.dispose();
		if (operandItemProvider != null)
			operandItemProvider.dispose();
		if (operationItemProvider != null)
			operationItemProvider.dispose();
		if (sensorTypeItemProvider != null)
			sensorTypeItemProvider.dispose();
		if (actuatorTypeItemProvider != null)
			actuatorTypeItemProvider.dispose();
	}

}
